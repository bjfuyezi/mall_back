package com.example.demo.router;import com.example.demo.enums.ShopStatus;import com.example.demo.pojo.Comment;import com.example.demo.pojo.Orders;import com.example.demo.pojo.User;import com.example.demo.pojo.Vo.OrderVo;import com.example.demo.service.OrderService;import com.fasterxml.jackson.annotation.JsonIgnoreProperties;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.time.LocalDateTime;import java.util.Date;import java.util.List;import java.util.Map;@RestController@RequestMapping("/order")public class OrderRouter {    @Autowired    private OrderService orderService;    @PostMapping("/create")    public ResponseEntity<Void> insertOrder(            @RequestBody Orders order){        try {            System.out.println("Received order data: " + order);            order.setStatus("pending");            LocalDateTime now = LocalDateTime.now();            Date createtime = java.sql.Timestamp.valueOf(now);;            order.setCreat_time(createtime);            System.out.println(order.getOrder_id()+order.getStatus()+order.getPayment_method()+order.getPrice()            +order.getCreat_time()+ order.getUser_id()+order.getQuantity());            orderService.addOrder(order);            return new ResponseEntity<>(HttpStatus.CREATED);        } catch (Exception e) {            System.out.println("Error inserting order: " + e.getMessage());            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);        }    }    @PostMapping("/pay")    public ResponseEntity<Void> payOrder(            @RequestBody Orders or){        try {            System.out.println("Received order data: " + or.getPayment_method()+or.getOrder_id());            or.setStatus("delivered");            LocalDateTime now = LocalDateTime.now();            Date paytime = java.sql.Timestamp.valueOf(now);;            or.setPay_time(paytime);            orderService.updateStatusAndPaymentMethod(or);            return new ResponseEntity<>(HttpStatus.CREATED);        }catch (Exception e){            System.out.println("Error inserting order: " + e.getMessage());            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);        }    }    @PostMapping("/getOrdervo")    public ResponseEntity<List<OrderVo>> getOrdervo(@RequestBody Map<String, Object> request) {        Integer user_id = (Integer) request.get("user_id");        System.out.println("Received order data: " + user_id);        List<OrderVo> ordervolist = orderService.selectAllOrderVo(user_id);        return ResponseEntity.ok(ordervolist);        //requestparam he requestbody    }    @PostMapping("/received")    public ResponseEntity<Void> receivedOrder(@RequestBody Orders or){        try {            System.out.println("Received order data: " + or.getOrder_id());            or.setStatus("completed");            LocalDateTime now = LocalDateTime.now();            Date completedtime = java.sql.Timestamp.valueOf(now);;            or.setPay_time(completedtime);            orderService.updateStatus(or);            return new ResponseEntity<>(HttpStatus.CREATED);        }        catch (Exception e){            System.out.println("Error inserting order: " + e.getMessage());            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);        }    }}